# this is an example orb file, useful as a reference

# This code is licensed from CircleCI to the user under the MIT license. See
# https://circleci.com/orbs/registry/licensing for details.
commands:
  add_private_registry:
    description: |
      Adds credentials for private registries to anchore engine.
      Set registry credentials with $DOCKER_USER & $DOCKER_PASS env vars.
      Must run on executor with anchore-engine running & anchore-cli installed.
    parameters:
      registry_name:
        default: docker.io
        description: Name of private registry (eg - docker.io).
        type: string
      registry_pass:
        default: $DOCKER_PASS
        description: Password for private registry (use env var to populate).
        type: string
      registry_user:
        default: $DOCKER_USER
        description: Username for private registry (use env var to populate).
        type: string
    steps:
    - run:
        command: |
          REGISTRY_NAME="<< parameters.registry_name >>"
          REGISTRY_USER="<< parameters.registry_user >>"
          REGISTRY_PASS="<< parameters.registry_pass >>"
          docker exec -e REGISTRY_NAME="$REGISTRY_NAME" -e REGISTRY_USER="$REGISTRY_USER" -e REGISTRY_PASS="$REGISTRY_PASS" -it anchore-engine bash -lc 'anchore-cli registry add --skip-validate "$REGISTRY_NAME" "$REGISTRY_USER" "$REGISTRY_PASS"'
        name: Add private registry credentials to anchore engine.
  analyze_image:
    description: |
      Add image to anchore engine and start analyzing.
      image_name is required, timeout is optional.
    parameters:
      image_name:
        description: Image repository & tag (eg - "docker.io/anchore/anchore-engine:latest").
        type: string
      timeout:
        default: "300"
        description: Timeout used for Anchore Engine image scanning.
        type: string
    steps:
    - run:
        command: |
          IMAGE_NAME="<< parameters.image_name >>"
          TIMEOUT=<< parameters.timeout >>
          docker exec -e IMAGE_NAME="$IMAGE_NAME" -e TIMEOUT="$TIMEOUT" -it anchore-engine bash -lc 'anchore_ci_tools.py --analyze --report --image "$IMAGE_NAME" --timeout "$TIMEOUT"'
          docker exec -e IMAGE_NAME="$IMAGE_NAME" -it anchore-engine bash -lc 'anchore-cli image get "$IMAGE_NAME"'
          docker cp anchore-engine:/anchore-engine/anchore-reports/ ./
        name: Analyze image with anchore engine.
  analyze_local_image:
    description: |
      Pushes a local image to a temporary registry container.
      Image is then scanned with anchore engine. Stores all reports as artifacts.
      Must be run in job with setup_remote_docker & using an image with docker installed.
    parameters:
      anchore_version:
        default: $ANCHORE_VERSION
        description: Version of anchore inline-scan image.
        type: string
      dockerfile_path:
        default: ""
        description: Path to dockerfile used to build image
        type: string
      image_name:
        description: Image repository & tag (eg - "docker.io/anchore/anchore-engine:latest").
        type: string
      policy_bundle_file_path:
        default: ${HOME}/project/.circleci/.anchore/policy_bundle.json
        description: Specify file path to policy bundle.
        type: string
      policy_failure:
        default: false
        description: Set to True if pipeline should stop on policy evaluation status
          'fail'.
        type: boolean
      timeout:
        default: "300"
        description: Timeout used for Anchore Engine image scanning.
        type: string
    steps:
    - run:
        command: |
          if [[ ! $(which bash) ]]; then
            (set +o pipefail; apk add bash || apt-get install -y bash || yum install -y bash)
          fi
          if [[ ! $(which curl) ]]; then
            (set +o pipefail; apk add curl || apt-get install -y curl || yum install -y curl)
          fi
          POLICY_FAILURE="<< parameters.policy_failure >>"
          ANCHORE_VERSION="<< parameters.anchore_version >>"
          TIMEOUT=<< parameters.timeout >>
          POLICY_BUNDLE_PATH="<< parameters.policy_bundle_file_path >>"
          DOCKERFILE_PATH="<< parameters.dockerfile_path >>"
          IMAGE_NAME="<< parameters.image_name >>"
          run_cmd="curl -s https://ci-tools.anchore.io/inline_scan-${ANCHORE_VERSION} | bash -s -- -r -t $TIMEOUT"
          if $POLICY_FAILURE; then
            run_cmd="$run_cmd -f"
          fi
          if [[ ! -z $POLICY_BUNDLE_PATH ]] && [[ -f $POLICY_BUNDLE_PATH ]]; then
            run_cmd="$run_cmd -b $POLICY_BUNDLE_PATH"
          else
            echo "ERROR - could not find policy bundle $POLICY_BUNDLE_PATH - using default policy bundle."
          fi
          if [[ ! -z $DOCKERFILE_PATH ]] && [[ -f $DOCKERFILE_PATH ]]; then
            run_cmd="$run_cmd -d $DOCKERFILE_PATH"
          else
            echo "ERROR - could not find Dockerfile $DOCKERFILE_PATH - Dockerfile not included in scan."
          fi
          run_cmd="$run_cmd $IMAGE_NAME"
          eval "$run_cmd"
        name: Scan local image.
  parse_reports:
    description: Prints analysis report of package vulnerabilities using JQ.
    steps:
    - run:
        command: |
          if [[ ! $(which jq) ]]; then
            (set +o pipefail; apk add jq || apt-get install -y jq || yum install -y jq)
          fi
          if [[ $(ls anchore-reports/*content-os*.json 2> /dev/null) ]]; then
            printf "\n%s\n" "The following OS packages are installed:"
            jq '[.content | sort_by(.package) | .[] | {package: .package, version: .version}]' anchore-reports/*content-os*.json
          fi
          if [[ $(ls anchore-reports/*vuln*.json 2> /dev/null) ]]; then
            printf "\n%s\n" "The following vulnerabilities were found:"
            jq '[.vulnerabilities | group_by(.package) | .[] | {package: .[0].package, vuln: [.[].vuln]}]' anchore-reports/*vuln*.json
          fi
        name: View parsed vulnerability analysis report.
  policy_evaluation:
    description: |
      Perform policy evaluation using Anchore Engine image analysis. A customized policy bundle can be utilized for evaluation.
      Custom policy bundles should be added to your repository at .circleci/.anchore/policy_bundle.json. If using multiple policy
      bundles, or if using executor other than anchore/anchore_engine a custom policy bundle path can be set as a parameter.
    parameters:
      image_name:
        description: Image repository & tag (eg - "docker.io/anchore/anchore-engine:latest").
        type: string
      policy_bundle_file_path:
        default: ${HOME}/project/.circleci/.anchore/policy_bundle.json
        description: Specify file path to policy bundle.
        type: string
      policy_failure:
        default: false
        description: Set to True if pipeline should stop on policy evaluation status
          'fail'.
        type: boolean
    steps:
    - run:
        command: |
          BUNDLE_PATH="<< parameters.policy_bundle_file_path >>"
          IMAGE_NAME="<< parameters.image_name >>"
          if [[ ! $(which jq) ]]; then
            (set +o pipefail; apk add jq || apt-get install -y jq || yum install -y jq)
          fi
          if [[ ! -z "$BUNDLE_PATH" ]] && [[ -f "$BUNDLE_PATH" ]]; then
            docker cp "$BUNDLE_PATH" anchore-engine:/anchore-engine/$(basename "$BUNDLE_PATH")
            (docker exec -e BUNDLE_PATH="$BUNDLE_PATH" -i anchore-engine bash -lc 'anchore-cli --json policy add /anchore-engine/$(basename "$BUNDLE_PATH")' | jq '.policyId' | xargs docker exec -i bash -lc 'anchore-engine anchore-cli policy activate') || \
              printf "\n%s\n" "Failed to activate policy bundle $BUNDLE_PATH - using default policy."
          else
            printf "\n%s\n" "Unable to locate policy bundle $BUNDLE_PATH - using default policy."
          fi
          if << parameters.policy_failure >>; then
            docker exec -e IMAGE_NAME="$IMAGE_NAME" -it anchore-engine bash -lc 'anchore-cli evaluate check "$IMAGE_NAME" --detail'
          else
            (set +o pipefail; docker exec -e IMAGE_NAME="$IMAGE_NAME" -it anchore-engine bash -lc 'anchore-cli evaluate check "$IMAGE_NAME" --detail' | tee /dev/null)
          fi
        name: Evaluate image against desired policy bundle.
  start_engine:
    description: Start & wait for Anchore Engine
    parameters:
      anchore_version:
        default: $ANCHORE_VERSION
        description: Version of anchore inline-scan image.
        type: string
      timeout:
        default: "300"
        description: Timeout used for Anchore Engine image scanning.
        type: string
    steps:
    - run:
        command: |
          ANCHORE_VERSION="<< parameters.anchore_version >>"
          TIMEOUT=<< parameters.timeout >>
          docker run -d --name anchore-engine "anchore/inline-scan:${ANCHORE_VERSION}" start
          docker exec -e TIMEOUT="$TIMEOUT" -it anchore-engine bash -lc 'anchore_ci_tools.py --wait --timeout "$TIMEOUT"'
        name: Start Anchore Engine
description: |
  Anchore Engine is a docker container static analysis and policy-based compliance tool that
  automates the inspection, analysis, and evaluation of images to allow high confidence in
  container deployments by ensuring workload content meets the required criteria.
  Anchore Engine Project - https://github.com/anchore/anchore-engine
  Orb source code - https://github.com/anchore/circleci-orbs/blob/master/anchore-engine/src
examples:
  local_image_scan:
    description: |
      Use the analyze_local_image command within a container build pipeline,
      it can be used to scan an image that hasn't been pushed to a registry yet.
      If Anchore policy evaluation gives 'fail' status, the CI job will be marked
      as a failure. A custom policy can be used for evaluation, add custom Anchore
      policy bundle to .circleci/.anchore/policy_bundle.json in your repository.
      The Dockerfile used for building your image can be passed for policy evaluation.
    usage:
      jobs:
        local_image_scan:
          executor: anchore/anchore_engine
          steps:
          - setup_remote_docker
          - checkout
          - run:
              command: docker build -t "example/test:latest" .
              name: build container
          - anchore/analyze_local_image:
              dockerfile_path: ./Dockerfile
              image_name: example/test:latest
              policy_bundle_file_path: .circleci/.anchore/policy_bundle.json
              policy_failure: true
              timeout: "500"
          - anchore/parse_reports
          - store_artifacts:
              path: anchore-reports
      orbs:
        anchore: anchore/anchore-engine@1.6.5
      version: 2.1
  multiple_local_image_scan:
    description: |
      Use the analyze_local_image command within a container build pipeline,
      it can be used to scan multiple images that haven't been pushed to a registry yet.
      If Anchore policy evaluation gives 'fail' status, the CI job will be marked
      as a failure. A custom policy can be used for evaluation, add custom Anchore
      policy bundle to .circleci/.anchore/policy_bundle.json in your repository.
      Scanning multiple images does not support passing a dockerfile.
    usage:
      jobs:
        local_image_scan:
          executor: anchore/anchore_engine
          steps:
          - setup_remote_docker
          - checkout
          - run:
              command: |
                docker build -t "example/test:dev" dev/
                docker build -t "example/test:staging" staging/
                docker build -t "example/test:latest" prod/
              name: build containers
          - anchore/analyze_local_image:
              image_name: example/test:dev example/test:staging example/test:latest
              policy_bundle_file_path: .circleci/.anchore/policy_bundle.json
              policy_failure: true
              timeout: "500"
          - anchore/parse_reports
          - store_artifacts:
              path: anchore-reports
      orbs:
        anchore: anchore/anchore-engine@1.6.5
      version: 2.1
  private_image_scan:
    description: |
      Use this job to scan an image located in a private registry. A custom
      policy can be used for evaluation, add custom Anchore policy bundle to
      .circleci/.anchore/policy_bundle.json in your repository.
    usage:
      orbs:
        anchore: anchore/anchore-engine@1.6.5
      version: 2.1
      workflows:
        scan_image:
          jobs:
          - anchore/image_scan:
              image_name: docker.io/anchore/anchore-engine:latest
              private_registry: true
              registry_name: docker.io
              registry_pass: $DOCKER_PASS
              registry_user: $DOCKER_USER
  standard_image_scan:
    description: |
      Use this job to scan an image located in a public registry. A custom
      policy can be used for evaluation, add custom Anchore policy bundle to
      .circleci/.anchore/policy_bundle.json in your repository.
    usage:
      orbs:
        anchore: anchore/anchore-engine@1.6.5
      version: 2.1
      workflows:
        scan_image:
          jobs:
          - anchore/image_scan:
              image_name: docker.io/anchore/anchore-engine:latest
              policy_bundle_file_path: .circleci/.anchore/policy_bundle.json
              timeout: "300"
executors:
  anchore_engine:
    description: |
      Docker stable image with ANCHORE_VERSION environment variable set.
    docker:
    - image: docker:stable-git
    environment:
      ANCHORE_VERSION: v0.6.1
jobs:
  image_scan:
    description: |
      Performs a static security analysis of docker container with anchore engine.
      A custom policy can be used for evaluation, add custom Anchore policy bundle
      to .circleci/.anchore/policy_bundle.json in your repository. Anchore engine pulls
      image from public/private docker registries. Requires registry credentials
      to access private images, use ENV vars $DOCKER_USER & $DOCKER_PASS
    executor: anchore_engine
    parameters:
      after_analyze:
        default: []
        description: Optional steps to run after analyzing the docker image.
        type: steps
      after_checkout:
        default: []
        description: Optional steps to run after checking out the code.
        type: steps
      before_analyze:
        default: []
        description: Optional steps to run before analyzing the docker image.
        type: steps
      image_name:
        description: Image repository & tag (eg - docker.io/anchore/anchore-engine:latest).
        type: string
      policy_bundle_file_path:
        default: ${HOME}/project/.circleci/.anchore/policy_bundle.json
        description: Specify file path to policy bundle.
        type: string
      policy_failure:
        default: false
        description: Set to True if pipeline should stop on policy evaluation status
          'fail'.
        type: boolean
      private_registry:
        default: false
        description: Set to True if image is only accessible from a private registry.
        type: boolean
      registry_name:
        default: docker.io
        description: Name of private registry (eg - docker.io)
        type: string
      registry_pass:
        default: $DOCKER_PASS
        description: Password for private registry (use env var $DOCKER_PASS to populate).
        type: string
      registry_user:
        default: $DOCKER_USER
        description: Username for private registry (use env var $DOCKER_USER to populate).
        type: string
      timeout:
        default: "300"
        description: Timeout used for Anchore Engine image scanning.
        type: string
    steps:
    - setup_remote_docker:
        docker_layer_caching: true
    - checkout
    - when:
        condition: << parameters.after_checkout >>
        name: Run after_checkout life cycle hook steps.
        steps: << parameters.after_checkout >>
    - start_engine
    - when:
        condition: << parameters.before_analyze >>
        name: Run before_analyze life cycle hook steps.
        steps: << parameters.before_analyze >>
    - when:
        condition: << parameters.private_registry >>
        steps:
        - add_private_registry:
            registry_name: << parameters.registry_name >>
            registry_pass: << parameters.registry_pass >>
            registry_user: << parameters.registry_user >>
    - analyze_image:
        image_name: << parameters.image_name >>
        timeout: << parameters.timeout >>
    - when:
        condition: << parameters.after_analyze >>
        name: Run after_analyze life cycle hook steps.
        steps: << parameters.after_analyze >>
    - policy_evaluation:
        image_name: << parameters.image_name >>
        policy_bundle_file_path: << parameters.policy_bundle_file_path >>
        policy_failure: << parameters.policy_failure >>
    - parse_reports
    - store_artifacts:
        path: anchore-reports
version: 2.1